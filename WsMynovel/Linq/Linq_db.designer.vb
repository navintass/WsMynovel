'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Mynovel")>  _
Partial Public Class Linq_dbDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertproduct(instance As product)
    End Sub
  Partial Private Sub Updateproduct(instance As product)
    End Sub
  Partial Private Sub Deleteproduct(instance As product)
    End Sub
  Partial Private Sub InsertUserReadHistory(instance As UserReadHistory)
    End Sub
  Partial Private Sub UpdateUserReadHistory(instance As UserReadHistory)
    End Sub
  Partial Private Sub DeleteUserReadHistory(instance As UserReadHistory)
    End Sub
  Partial Private Sub InsertProductBanner(instance As ProductBanner)
    End Sub
  Partial Private Sub UpdateProductBanner(instance As ProductBanner)
    End Sub
  Partial Private Sub DeleteProductBanner(instance As ProductBanner)
    End Sub
  Partial Private Sub Insertproduct_set(instance As product_set)
    End Sub
  Partial Private Sub Updateproduct_set(instance As product_set)
    End Sub
  Partial Private Sub Deleteproduct_set(instance As product_set)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("MynovelConnectionString1").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property products() As System.Data.Linq.Table(Of product)
		Get
			Return Me.GetTable(Of product)
		End Get
	End Property
	
	Public ReadOnly Property UserReadHistories() As System.Data.Linq.Table(Of UserReadHistory)
		Get
			Return Me.GetTable(Of UserReadHistory)
		End Get
	End Property
	
	Public ReadOnly Property ProductBanners() As System.Data.Linq.Table(Of ProductBanner)
		Get
			Return Me.GetTable(Of ProductBanner)
		End Get
	End Property
	
	Public ReadOnly Property product_sets() As System.Data.Linq.Table(Of product_set)
		Get
			Return Me.GetTable(Of product_set)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.product")>  _
Partial Public Class product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ida As Integer
	
	Private _id As String
	
	Private _ProductName As String
	
	Private _ProductIntro As String
	
	Private _CreateBy As String
	
	Private _CreateId As String
	
	Private _ProductView As System.Nullable(Of Integer)
	
	Private _ProductGroup As String
	
	Private _ProductTypeSet As String
	
	Private _ProductPrice As System.Nullable(Of Double)
	
	Private _isPublish As System.Nullable(Of Boolean)
	
	Private _ImageUrl As String
	
	Private _EpCountPublised As System.Nullable(Of Integer)
	
	Private _ProductRate As String
	
	Private _ProductType As String
	
	Private _fanClubTranslate As String
	
	Private _ProductPublisher As String
	
	Private _isCopyright As System.Nullable(Of Boolean)
	
	Private _isAccept As System.Nullable(Of Boolean)
	
	Private _EpLastUpdate As System.Nullable(Of Date)
	
	Private _isFinished As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidaChanged()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnProductIntroChanging(value As String)
    End Sub
    Partial Private Sub OnProductIntroChanged()
    End Sub
    Partial Private Sub OnCreateByChanging(value As String)
    End Sub
    Partial Private Sub OnCreateByChanged()
    End Sub
    Partial Private Sub OnCreateIdChanging(value As String)
    End Sub
    Partial Private Sub OnCreateIdChanged()
    End Sub
    Partial Private Sub OnProductViewChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductViewChanged()
    End Sub
    Partial Private Sub OnProductGroupChanging(value As String)
    End Sub
    Partial Private Sub OnProductGroupChanged()
    End Sub
    Partial Private Sub OnProductTypeSetChanging(value As String)
    End Sub
    Partial Private Sub OnProductTypeSetChanged()
    End Sub
    Partial Private Sub OnProductPriceChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnProductPriceChanged()
    End Sub
    Partial Private Sub OnisPublishChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisPublishChanged()
    End Sub
    Partial Private Sub OnImageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnImageUrlChanged()
    End Sub
    Partial Private Sub OnEpCountPublisedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEpCountPublisedChanged()
    End Sub
    Partial Private Sub OnProductRateChanging(value As String)
    End Sub
    Partial Private Sub OnProductRateChanged()
    End Sub
    Partial Private Sub OnProductTypeChanging(value As String)
    End Sub
    Partial Private Sub OnProductTypeChanged()
    End Sub
    Partial Private Sub OnfanClubTranslateChanging(value As String)
    End Sub
    Partial Private Sub OnfanClubTranslateChanged()
    End Sub
    Partial Private Sub OnProductPublisherChanging(value As String)
    End Sub
    Partial Private Sub OnProductPublisherChanged()
    End Sub
    Partial Private Sub OnisCopyrightChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisCopyrightChanged()
    End Sub
    Partial Private Sub OnisAcceptChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisAcceptChanged()
    End Sub
    Partial Private Sub OnEpLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEpLastUpdateChanged()
    End Sub
    Partial Private Sub OnisFinishedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisFinishedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ida", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ida() As Integer
		Get
			Return Me._ida
		End Get
		Set
			If ((Me._ida = value)  _
						= false) Then
				Me.OnidaChanging(value)
				Me.SendPropertyChanging
				Me._ida = value
				Me.SendPropertyChanged("ida")
				Me.OnidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="NVarChar(100)")>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(MAX)")>  _
	Public Property ProductName() As String
		Get
			Return Me._ProductName
		End Get
		Set
			If (String.Equals(Me._ProductName, value) = false) Then
				Me.OnProductNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductName = value
				Me.SendPropertyChanged("ProductName")
				Me.OnProductNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductIntro", DbType:="NVarChar(MAX)")>  _
	Public Property ProductIntro() As String
		Get
			Return Me._ProductIntro
		End Get
		Set
			If (String.Equals(Me._ProductIntro, value) = false) Then
				Me.OnProductIntroChanging(value)
				Me.SendPropertyChanging
				Me._ProductIntro = value
				Me.SendPropertyChanged("ProductIntro")
				Me.OnProductIntroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateBy", DbType:="NVarChar(MAX)")>  _
	Public Property CreateBy() As String
		Get
			Return Me._CreateBy
		End Get
		Set
			If (String.Equals(Me._CreateBy, value) = false) Then
				Me.OnCreateByChanging(value)
				Me.SendPropertyChanging
				Me._CreateBy = value
				Me.SendPropertyChanged("CreateBy")
				Me.OnCreateByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateId", DbType:="NVarChar(50)")>  _
	Public Property CreateId() As String
		Get
			Return Me._CreateId
		End Get
		Set
			If (String.Equals(Me._CreateId, value) = false) Then
				Me.OnCreateIdChanging(value)
				Me.SendPropertyChanging
				Me._CreateId = value
				Me.SendPropertyChanged("CreateId")
				Me.OnCreateIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductView", DbType:="Int")>  _
	Public Property ProductView() As System.Nullable(Of Integer)
		Get
			Return Me._ProductView
		End Get
		Set
			If (Me._ProductView.Equals(value) = false) Then
				Me.OnProductViewChanging(value)
				Me.SendPropertyChanging
				Me._ProductView = value
				Me.SendPropertyChanged("ProductView")
				Me.OnProductViewChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductGroup", DbType:="NVarChar(100)")>  _
	Public Property ProductGroup() As String
		Get
			Return Me._ProductGroup
		End Get
		Set
			If (String.Equals(Me._ProductGroup, value) = false) Then
				Me.OnProductGroupChanging(value)
				Me.SendPropertyChanging
				Me._ProductGroup = value
				Me.SendPropertyChanged("ProductGroup")
				Me.OnProductGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductTypeSet", DbType:="NVarChar(50)")>  _
	Public Property ProductTypeSet() As String
		Get
			Return Me._ProductTypeSet
		End Get
		Set
			If (String.Equals(Me._ProductTypeSet, value) = false) Then
				Me.OnProductTypeSetChanging(value)
				Me.SendPropertyChanging
				Me._ProductTypeSet = value
				Me.SendPropertyChanged("ProductTypeSet")
				Me.OnProductTypeSetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductPrice", DbType:="Float")>  _
	Public Property ProductPrice() As System.Nullable(Of Double)
		Get
			Return Me._ProductPrice
		End Get
		Set
			If (Me._ProductPrice.Equals(value) = false) Then
				Me.OnProductPriceChanging(value)
				Me.SendPropertyChanging
				Me._ProductPrice = value
				Me.SendPropertyChanged("ProductPrice")
				Me.OnProductPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isPublish", DbType:="Bit")>  _
	Public Property isPublish() As System.Nullable(Of Boolean)
		Get
			Return Me._isPublish
		End Get
		Set
			If (Me._isPublish.Equals(value) = false) Then
				Me.OnisPublishChanging(value)
				Me.SendPropertyChanging
				Me._isPublish = value
				Me.SendPropertyChanged("isPublish")
				Me.OnisPublishChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageUrl", DbType:="NVarChar(MAX)")>  _
	Public Property ImageUrl() As String
		Get
			Return Me._ImageUrl
		End Get
		Set
			If (String.Equals(Me._ImageUrl, value) = false) Then
				Me.OnImageUrlChanging(value)
				Me.SendPropertyChanging
				Me._ImageUrl = value
				Me.SendPropertyChanged("ImageUrl")
				Me.OnImageUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EpCountPublised", DbType:="Int")>  _
	Public Property EpCountPublised() As System.Nullable(Of Integer)
		Get
			Return Me._EpCountPublised
		End Get
		Set
			If (Me._EpCountPublised.Equals(value) = false) Then
				Me.OnEpCountPublisedChanging(value)
				Me.SendPropertyChanging
				Me._EpCountPublised = value
				Me.SendPropertyChanged("EpCountPublised")
				Me.OnEpCountPublisedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductRate", DbType:="NVarChar(50)")>  _
	Public Property ProductRate() As String
		Get
			Return Me._ProductRate
		End Get
		Set
			If (String.Equals(Me._ProductRate, value) = false) Then
				Me.OnProductRateChanging(value)
				Me.SendPropertyChanging
				Me._ProductRate = value
				Me.SendPropertyChanged("ProductRate")
				Me.OnProductRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductType", DbType:="NVarChar(100)")>  _
	Public Property ProductType() As String
		Get
			Return Me._ProductType
		End Get
		Set
			If (String.Equals(Me._ProductType, value) = false) Then
				Me.OnProductTypeChanging(value)
				Me.SendPropertyChanging
				Me._ProductType = value
				Me.SendPropertyChanged("ProductType")
				Me.OnProductTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fanClubTranslate", DbType:="NVarChar(100)")>  _
	Public Property fanClubTranslate() As String
		Get
			Return Me._fanClubTranslate
		End Get
		Set
			If (String.Equals(Me._fanClubTranslate, value) = false) Then
				Me.OnfanClubTranslateChanging(value)
				Me.SendPropertyChanging
				Me._fanClubTranslate = value
				Me.SendPropertyChanged("fanClubTranslate")
				Me.OnfanClubTranslateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductPublisher", DbType:="NVarChar(MAX)")>  _
	Public Property ProductPublisher() As String
		Get
			Return Me._ProductPublisher
		End Get
		Set
			If (String.Equals(Me._ProductPublisher, value) = false) Then
				Me.OnProductPublisherChanging(value)
				Me.SendPropertyChanging
				Me._ProductPublisher = value
				Me.SendPropertyChanged("ProductPublisher")
				Me.OnProductPublisherChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isCopyright", DbType:="Bit")>  _
	Public Property isCopyright() As System.Nullable(Of Boolean)
		Get
			Return Me._isCopyright
		End Get
		Set
			If (Me._isCopyright.Equals(value) = false) Then
				Me.OnisCopyrightChanging(value)
				Me.SendPropertyChanging
				Me._isCopyright = value
				Me.SendPropertyChanged("isCopyright")
				Me.OnisCopyrightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isAccept", DbType:="Bit")>  _
	Public Property isAccept() As System.Nullable(Of Boolean)
		Get
			Return Me._isAccept
		End Get
		Set
			If (Me._isAccept.Equals(value) = false) Then
				Me.OnisAcceptChanging(value)
				Me.SendPropertyChanging
				Me._isAccept = value
				Me.SendPropertyChanged("isAccept")
				Me.OnisAcceptChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EpLastUpdate", DbType:="DateTime")>  _
	Public Property EpLastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._EpLastUpdate
		End Get
		Set
			If (Me._EpLastUpdate.Equals(value) = false) Then
				Me.OnEpLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._EpLastUpdate = value
				Me.SendPropertyChanged("EpLastUpdate")
				Me.OnEpLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isFinished", DbType:="Bit")>  _
	Public Property isFinished() As System.Nullable(Of Boolean)
		Get
			Return Me._isFinished
		End Get
		Set
			If (Me._isFinished.Equals(value) = false) Then
				Me.OnisFinishedChanging(value)
				Me.SendPropertyChanging
				Me._isFinished = value
				Me.SendPropertyChanged("isFinished")
				Me.OnisFinishedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserReadHistory")>  _
Partial Public Class UserReadHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ida As Integer
	
	Private _EpId As String
	
	Private _EpName As String
	
	Private _ProductId As String
	
	Private _ProductName As String
	
	Private _createDate As System.Nullable(Of Date)
	
	Private _userId As String
	
	Private _LastRead As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidaChanged()
    End Sub
    Partial Private Sub OnEpIdChanging(value As String)
    End Sub
    Partial Private Sub OnEpIdChanged()
    End Sub
    Partial Private Sub OnEpNameChanging(value As String)
    End Sub
    Partial Private Sub OnEpNameChanged()
    End Sub
    Partial Private Sub OnProductIdChanging(value As String)
    End Sub
    Partial Private Sub OnProductIdChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OncreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreateDateChanged()
    End Sub
    Partial Private Sub OnuserIdChanging(value As String)
    End Sub
    Partial Private Sub OnuserIdChanged()
    End Sub
    Partial Private Sub OnLastReadChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnLastReadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ida", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ida() As Integer
		Get
			Return Me._ida
		End Get
		Set
			If ((Me._ida = value)  _
						= false) Then
				Me.OnidaChanging(value)
				Me.SendPropertyChanging
				Me._ida = value
				Me.SendPropertyChanged("ida")
				Me.OnidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EpId", DbType:="NVarChar(50)")>  _
	Public Property EpId() As String
		Get
			Return Me._EpId
		End Get
		Set
			If (String.Equals(Me._EpId, value) = false) Then
				Me.OnEpIdChanging(value)
				Me.SendPropertyChanging
				Me._EpId = value
				Me.SendPropertyChanged("EpId")
				Me.OnEpIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EpName", DbType:="NVarChar(MAX)")>  _
	Public Property EpName() As String
		Get
			Return Me._EpName
		End Get
		Set
			If (String.Equals(Me._EpName, value) = false) Then
				Me.OnEpNameChanging(value)
				Me.SendPropertyChanging
				Me._EpName = value
				Me.SendPropertyChanged("EpName")
				Me.OnEpNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductId", DbType:="NVarChar(50)")>  _
	Public Property ProductId() As String
		Get
			Return Me._ProductId
		End Get
		Set
			If (String.Equals(Me._ProductId, value) = false) Then
				Me.OnProductIdChanging(value)
				Me.SendPropertyChanging
				Me._ProductId = value
				Me.SendPropertyChanged("ProductId")
				Me.OnProductIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(MAX)")>  _
	Public Property ProductName() As String
		Get
			Return Me._ProductName
		End Get
		Set
			If (String.Equals(Me._ProductName, value) = false) Then
				Me.OnProductNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductName = value
				Me.SendPropertyChanged("ProductName")
				Me.OnProductNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createDate", DbType:="DateTime")>  _
	Public Property createDate() As System.Nullable(Of Date)
		Get
			Return Me._createDate
		End Get
		Set
			If (Me._createDate.Equals(value) = false) Then
				Me.OncreateDateChanging(value)
				Me.SendPropertyChanging
				Me._createDate = value
				Me.SendPropertyChanged("createDate")
				Me.OncreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userId", DbType:="NVarChar(50)")>  _
	Public Property userId() As String
		Get
			Return Me._userId
		End Get
		Set
			If (String.Equals(Me._userId, value) = false) Then
				Me.OnuserIdChanging(value)
				Me.SendPropertyChanging
				Me._userId = value
				Me.SendPropertyChanged("userId")
				Me.OnuserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastRead", DbType:="Bit")>  _
	Public Property LastRead() As System.Nullable(Of Boolean)
		Get
			Return Me._LastRead
		End Get
		Set
			If (Me._LastRead.Equals(value) = false) Then
				Me.OnLastReadChanging(value)
				Me.SendPropertyChanging
				Me._LastRead = value
				Me.SendPropertyChanged("LastRead")
				Me.OnLastReadChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductBanner")>  _
Partial Public Class ProductBanner
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Ida As Integer
	
	Private _FkProductId As String
	
	Private _ImageUrl As String
	
	Private _Type As String
	
	Private _TypeSet As String
	
	Private _Section As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdaChanged()
    End Sub
    Partial Private Sub OnFkProductIdChanging(value As String)
    End Sub
    Partial Private Sub OnFkProductIdChanged()
    End Sub
    Partial Private Sub OnImageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnImageUrlChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnTypeSetChanging(value As String)
    End Sub
    Partial Private Sub OnTypeSetChanged()
    End Sub
    Partial Private Sub OnSectionChanging(value As String)
    End Sub
    Partial Private Sub OnSectionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ida", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Ida() As Integer
		Get
			Return Me._Ida
		End Get
		Set
			If ((Me._Ida = value)  _
						= false) Then
				Me.OnIdaChanging(value)
				Me.SendPropertyChanging
				Me._Ida = value
				Me.SendPropertyChanged("Ida")
				Me.OnIdaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FkProductId", DbType:="NVarChar(50)")>  _
	Public Property FkProductId() As String
		Get
			Return Me._FkProductId
		End Get
		Set
			If (String.Equals(Me._FkProductId, value) = false) Then
				Me.OnFkProductIdChanging(value)
				Me.SendPropertyChanging
				Me._FkProductId = value
				Me.SendPropertyChanged("FkProductId")
				Me.OnFkProductIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageUrl", DbType:="NVarChar(MAX)")>  _
	Public Property ImageUrl() As String
		Get
			Return Me._ImageUrl
		End Get
		Set
			If (String.Equals(Me._ImageUrl, value) = false) Then
				Me.OnImageUrlChanging(value)
				Me.SendPropertyChanging
				Me._ImageUrl = value
				Me.SendPropertyChanged("ImageUrl")
				Me.OnImageUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="NVarChar(50)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeSet", DbType:="NVarChar(50)")>  _
	Public Property TypeSet() As String
		Get
			Return Me._TypeSet
		End Get
		Set
			If (String.Equals(Me._TypeSet, value) = false) Then
				Me.OnTypeSetChanging(value)
				Me.SendPropertyChanging
				Me._TypeSet = value
				Me.SendPropertyChanged("TypeSet")
				Me.OnTypeSetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Section", DbType:="NVarChar(50)")>  _
	Public Property Section() As String
		Get
			Return Me._Section
		End Get
		Set
			If (String.Equals(Me._Section, value) = false) Then
				Me.OnSectionChanging(value)
				Me.SendPropertyChanging
				Me._Section = value
				Me.SendPropertyChanged("Section")
				Me.OnSectionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.product_set")>  _
Partial Public Class product_set
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ida As Integer
	
	Private _id As String
	
	Private _ProductName As String
	
	Private _ProductIntro As String
	
	Private _CreateBy As String
	
	Private _CreateId As String
	
	Private _ProductView As System.Nullable(Of Integer)
	
	Private _ProductGroup As String
	
	Private _ProductTypeSet As String
	
	Private _ImageUrl As String
	
	Private _EpCountPublised As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidaChanged()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnProductIntroChanging(value As String)
    End Sub
    Partial Private Sub OnProductIntroChanged()
    End Sub
    Partial Private Sub OnCreateByChanging(value As String)
    End Sub
    Partial Private Sub OnCreateByChanged()
    End Sub
    Partial Private Sub OnCreateIdChanging(value As String)
    End Sub
    Partial Private Sub OnCreateIdChanged()
    End Sub
    Partial Private Sub OnProductViewChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductViewChanged()
    End Sub
    Partial Private Sub OnProductGroupChanging(value As String)
    End Sub
    Partial Private Sub OnProductGroupChanged()
    End Sub
    Partial Private Sub OnProductTypeSetChanging(value As String)
    End Sub
    Partial Private Sub OnProductTypeSetChanged()
    End Sub
    Partial Private Sub OnImageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnImageUrlChanged()
    End Sub
    Partial Private Sub OnEpCountPublisedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEpCountPublisedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ida", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ida() As Integer
		Get
			Return Me._ida
		End Get
		Set
			If ((Me._ida = value)  _
						= false) Then
				Me.OnidaChanging(value)
				Me.SendPropertyChanging
				Me._ida = value
				Me.SendPropertyChanged("ida")
				Me.OnidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="NVarChar(MAX)")>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(MAX)")>  _
	Public Property ProductName() As String
		Get
			Return Me._ProductName
		End Get
		Set
			If (String.Equals(Me._ProductName, value) = false) Then
				Me.OnProductNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductName = value
				Me.SendPropertyChanged("ProductName")
				Me.OnProductNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductIntro", DbType:="NVarChar(MAX)")>  _
	Public Property ProductIntro() As String
		Get
			Return Me._ProductIntro
		End Get
		Set
			If (String.Equals(Me._ProductIntro, value) = false) Then
				Me.OnProductIntroChanging(value)
				Me.SendPropertyChanging
				Me._ProductIntro = value
				Me.SendPropertyChanged("ProductIntro")
				Me.OnProductIntroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateBy", DbType:="NVarChar(50)")>  _
	Public Property CreateBy() As String
		Get
			Return Me._CreateBy
		End Get
		Set
			If (String.Equals(Me._CreateBy, value) = false) Then
				Me.OnCreateByChanging(value)
				Me.SendPropertyChanging
				Me._CreateBy = value
				Me.SendPropertyChanged("CreateBy")
				Me.OnCreateByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateId", DbType:="NVarChar(50)")>  _
	Public Property CreateId() As String
		Get
			Return Me._CreateId
		End Get
		Set
			If (String.Equals(Me._CreateId, value) = false) Then
				Me.OnCreateIdChanging(value)
				Me.SendPropertyChanging
				Me._CreateId = value
				Me.SendPropertyChanged("CreateId")
				Me.OnCreateIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductView", DbType:="Int")>  _
	Public Property ProductView() As System.Nullable(Of Integer)
		Get
			Return Me._ProductView
		End Get
		Set
			If (Me._ProductView.Equals(value) = false) Then
				Me.OnProductViewChanging(value)
				Me.SendPropertyChanging
				Me._ProductView = value
				Me.SendPropertyChanged("ProductView")
				Me.OnProductViewChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductGroup", DbType:="NVarChar(MAX)")>  _
	Public Property ProductGroup() As String
		Get
			Return Me._ProductGroup
		End Get
		Set
			If (String.Equals(Me._ProductGroup, value) = false) Then
				Me.OnProductGroupChanging(value)
				Me.SendPropertyChanging
				Me._ProductGroup = value
				Me.SendPropertyChanged("ProductGroup")
				Me.OnProductGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductTypeSet", DbType:="NVarChar(MAX)")>  _
	Public Property ProductTypeSet() As String
		Get
			Return Me._ProductTypeSet
		End Get
		Set
			If (String.Equals(Me._ProductTypeSet, value) = false) Then
				Me.OnProductTypeSetChanging(value)
				Me.SendPropertyChanging
				Me._ProductTypeSet = value
				Me.SendPropertyChanged("ProductTypeSet")
				Me.OnProductTypeSetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageUrl", DbType:="NVarChar(MAX)")>  _
	Public Property ImageUrl() As String
		Get
			Return Me._ImageUrl
		End Get
		Set
			If (String.Equals(Me._ImageUrl, value) = false) Then
				Me.OnImageUrlChanging(value)
				Me.SendPropertyChanging
				Me._ImageUrl = value
				Me.SendPropertyChanged("ImageUrl")
				Me.OnImageUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EpCountPublised", DbType:="Int")>  _
	Public Property EpCountPublised() As System.Nullable(Of Integer)
		Get
			Return Me._EpCountPublised
		End Get
		Set
			If (Me._EpCountPublised.Equals(value) = false) Then
				Me.OnEpCountPublisedChanging(value)
				Me.SendPropertyChanging
				Me._EpCountPublised = value
				Me.SendPropertyChanged("EpCountPublised")
				Me.OnEpCountPublisedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
